/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.cwlplugin.lexer;

import com.cwlplugin.parser.CwlTokenTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cwl.flex</tt>
 */
class _CwlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\13\1\14\1\1\22\0\1\10\2\0\1\4\1\11\3\0\1\12\1\15\2\0\1\42"+
    "\1\0\1\77\1\0\1\5\1\76\10\6\1\7\7\0\1\70\1\32\1\53\1\65\1\24\2\0\1\54\1\67"+
    "\1\0\1\43\1\46\1\64\1\57\1\60\1\74\1\61\1\71\1\20\1\0\1\51\1\66\3\0\1\72\1"+
    "\0\1\73\3\0\1\25\1\31\1\37\1\36\1\23\1\52\1\55\1\40\1\44\1\0\1\41\1\26\1\34"+
    "\1\35\1\33\1\56\1\62\1\21\1\27\1\45\1\22\1\63\1\50\1\47\1\30\1\75\1\16\1\0"+
    "\1\17\7\0\1\13\242\0\2\13\26\0");


  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\1\1\10\16\1\1\11\15\1\1\12\1\13\40\0"+
    "\1\14\27\0\2\15\35\0\1\16\7\0\1\17\32\0"+
    "\1\20\3\0\1\21\4\0\1\22\3\0\1\23\5\0"+
    "\1\24\10\0\1\25\1\26\14\0\1\27\10\0\1\30"+
    "\2\0\1\31\4\0\1\32\12\0\1\33\3\0\1\34"+
    "\1\35\10\0\1\36\14\0\1\37\4\0\1\40\4\0"+
    "\1\41\21\0\1\42\1\0\1\43\1\44\2\0\1\45"+
    "\10\0\1\46\11\0\1\47\6\0\1\50\4\0\1\51"+
    "\4\0\1\52\16\0\1\53\2\0\1\54\6\0\1\55"+
    "\2\0\1\56\2\0\1\57\1\60\5\0\1\61\15\0"+
    "\1\62\2\0\1\63\11\0\1\64\1\0\1\65\1\0"+
    "\1\66\3\0\1\67\4\0\1\70\5\0\1\71\1\72"+
    "\1\73\1\74\5\0\1\75\4\0\1\76\4\0\1\77"+
    "\4\0\1\100\6\0\1\101\1\102\12\0\1\103\1\104"+
    "\1\0\1\105\3\0\1\106\10\0\1\107\1\110\2\0"+
    "\1\111\1\112\1\113\3\0\1\114\1\115\16\0\1\116"+
    "\17\0\1\117\1\120\3\0\1\121\1\0\1\122\14\0"+
    "\1\123\1\0\1\124\11\0\1\125\7\0\1\126\3\0"+
    "\1\127\23\0\1\130\3\0\1\131\15\0\1\132\1\133"+
    "\5\0\1\134\1\0\1\135\10\0\1\136\3\0\1\137"+
    "\1\0\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[624];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\200\0\200\0\u0100\0\200"+
    "\0\u0140\0\200\0\200\0\u0180\0\200\0\u01c0\0\u0200\0\u0240"+
    "\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440"+
    "\0\u0480\0\u04c0\0\u0500\0\200\0\u0540\0\u0580\0\u05c0\0\u0600"+
    "\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800"+
    "\0\u0840\0\200\0\200\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980"+
    "\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80"+
    "\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80"+
    "\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u1000\0\u1040\0\200\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u1600\0\u0880\0\u08c0\0\u1640\0\u1680\0\u16c0"+
    "\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0"+
    "\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0"+
    "\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0"+
    "\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0"+
    "\0\u1f00\0\u1f40\0\200\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480"+
    "\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\200\0\u2600\0\u2640"+
    "\0\u2680\0\200\0\u26c0\0\u2700\0\u2740\0\u2780\0\200\0\u27c0"+
    "\0\u2800\0\u2840\0\200\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980"+
    "\0\200\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40"+
    "\0\u2b80\0\200\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00"+
    "\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\200"+
    "\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0"+
    "\0\200\0\u3100\0\u3140\0\200\0\u3180\0\u31c0\0\u3200\0\u3240"+
    "\0\200\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400"+
    "\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\200"+
    "\0\200\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780"+
    "\0\u37c0\0\200\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940"+
    "\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\200\0\u3b00"+
    "\0\u3b40\0\u3b80\0\u3bc0\0\200\0\u3c00\0\u3c40\0\u3c80\0\u3cc0"+
    "\0\200\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80"+
    "\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u4080"+
    "\0\u40c0\0\u4100\0\200\0\u4140\0\200\0\200\0\u4180\0\u41c0"+
    "\0\200\0\u4200\0\u4240\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380"+
    "\0\u43c0\0\200\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540"+
    "\0\u4580\0\u45c0\0\u4600\0\200\0\u4640\0\u4680\0\u46c0\0\u4700"+
    "\0\u4740\0\u4780\0\200\0\u47c0\0\u4800\0\u4840\0\u4880\0\200"+
    "\0\u48c0\0\u4900\0\u4940\0\u4980\0\200\0\u49c0\0\u4a00\0\u4a40"+
    "\0\u4a80\0\u4ac0\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\u4c00\0\u4c40"+
    "\0\u4c80\0\u4cc0\0\u4d00\0\200\0\u4d40\0\u4d80\0\200\0\u4dc0"+
    "\0\u4e00\0\u4e40\0\u4e80\0\u4ec0\0\u4f00\0\200\0\u4f40\0\u4f80"+
    "\0\200\0\u4fc0\0\u5000\0\200\0\200\0\u5040\0\u5080\0\u50c0"+
    "\0\u5100\0\u5140\0\200\0\u5180\0\u51c0\0\u5200\0\u5240\0\u5280"+
    "\0\u52c0\0\u5300\0\u5340\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480"+
    "\0\200\0\u54c0\0\u5500\0\200\0\u5540\0\u5580\0\u55c0\0\u5600"+
    "\0\u5640\0\u5680\0\u56c0\0\u5700\0\u5740\0\200\0\u5780\0\200"+
    "\0\u57c0\0\200\0\u5800\0\u5840\0\u5880\0\200\0\u58c0\0\u5900"+
    "\0\u5940\0\u5980\0\200\0\u59c0\0\u5a00\0\u5a40\0\u5a80\0\u5ac0"+
    "\0\200\0\200\0\200\0\200\0\u5b00\0\u5b40\0\u5b80\0\u5bc0"+
    "\0\u5c00\0\200\0\u5c40\0\u5c80\0\u5cc0\0\u5d00\0\200\0\u5d40"+
    "\0\u5d80\0\u5dc0\0\u5e00\0\200\0\u5e40\0\u5e80\0\u5ec0\0\u5f00"+
    "\0\200\0\u5f40\0\u5f80\0\u5fc0\0\u6000\0\u6040\0\u6080\0\200"+
    "\0\200\0\u60c0\0\u6100\0\u6140\0\u6180\0\u61c0\0\u6200\0\u6240"+
    "\0\u6280\0\u62c0\0\u6300\0\200\0\200\0\u6340\0\200\0\u6380"+
    "\0\u63c0\0\u6400\0\200\0\u6440\0\u6480\0\u64c0\0\u6500\0\u6540"+
    "\0\u6580\0\u65c0\0\u6600\0\200\0\200\0\u6640\0\u6680\0\200"+
    "\0\200\0\200\0\u66c0\0\u6700\0\u6740\0\200\0\200\0\u6780"+
    "\0\u67c0\0\u6800\0\u6840\0\u6880\0\u68c0\0\u6900\0\u6940\0\u6980"+
    "\0\u69c0\0\u6a00\0\u6a40\0\u6a80\0\u6ac0\0\200\0\u6b00\0\u6b40"+
    "\0\u6b80\0\u6bc0\0\u6c00\0\u6c40\0\u6c80\0\u6cc0\0\u6d00\0\u6d40"+
    "\0\u6d80\0\u6dc0\0\u6e00\0\u6e40\0\u6e80\0\200\0\200\0\u6ec0"+
    "\0\u6f00\0\u6f40\0\200\0\u6f80\0\200\0\u6fc0\0\u7000\0\u7040"+
    "\0\u7080\0\u70c0\0\u7100\0\u7140\0\u7180\0\u71c0\0\u7200\0\u7240"+
    "\0\u7280\0\200\0\u72c0\0\200\0\u7300\0\u7340\0\u7380\0\u73c0"+
    "\0\u7400\0\u7440\0\u7480\0\u74c0\0\u7500\0\200\0\u7540\0\u7580"+
    "\0\u75c0\0\u7600\0\u7640\0\u7680\0\u76c0\0\200\0\u7700\0\u7740"+
    "\0\u7780\0\200\0\u77c0\0\u7800\0\u7840\0\u7880\0\u78c0\0\u7900"+
    "\0\u7940\0\u7980\0\u79c0\0\u7a00\0\u7a40\0\u7a80\0\u7ac0\0\u7b00"+
    "\0\u7b40\0\u7b80\0\u7bc0\0\u7c00\0\u7c40\0\200\0\u7c80\0\u7cc0"+
    "\0\u7d00\0\200\0\u7d40\0\u7d80\0\u7dc0\0\u7e00\0\u7e40\0\u7e80"+
    "\0\u7ec0\0\u7f00\0\u7f40\0\u7f80\0\u7fc0\0\u8000\0\u8040\0\200"+
    "\0\200\0\u8080\0\u80c0\0\u8100\0\u8140\0\u8180\0\200\0\u81c0"+
    "\0\200\0\u8200\0\u8240\0\u8280\0\u82c0\0\u8300\0\u8340\0\u8380"+
    "\0\u83c0\0\200\0\u8400\0\u8440\0\u8480\0\200\0\u84c0\0\200";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[624];

    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\3\1\0\1\15\3\3\1\16\1\17"+
    "\1\3\1\20\1\21\1\22\1\23\1\24\1\3\1\25"+
    "\1\26\1\27\1\3\1\30\1\31\1\32\1\33\1\3"+
    "\1\34\1\3\1\35\1\36\2\3\1\37\1\3\1\40"+
    "\1\41\1\42\1\43\1\44\2\3\1\45\1\3\1\46"+
    "\1\3\1\47\1\50\2\3\1\51\1\52\1\53\2\3"+
    "\1\11\2\3\2\0\10\3\2\0\63\3\102\0\1\5"+
    "\75\0\1\7\2\0\75\7\5\0\2\11\67\0\1\11"+
    "\13\0\1\54\3\0\1\55\102\0\1\56\101\0\1\57"+
    "\1\0\1\60\107\0\1\61\67\0\1\62\16\0\1\63"+
    "\54\0\1\64\103\0\1\65\5\0\1\66\10\0\1\67"+
    "\56\0\1\70\14\0\1\71\3\0\1\72\1\73\10\0"+
    "\1\74\46\0\1\75\5\0\1\76\77\0\1\77\66\0"+
    "\1\100\77\0\1\101\2\0\1\102\75\0\1\103\7\0"+
    "\1\104\10\0\1\105\61\0\1\106\4\0\1\107\4\0"+
    "\1\110\7\0\1\111\73\0\1\112\70\0\1\113\1\114"+
    "\6\0\1\115\62\0\1\116\3\0\1\117\64\0\1\120"+
    "\104\0\1\121\4\0\1\122\77\0\1\123\10\0\1\124"+
    "\70\0\1\125\70\0\1\126\72\0\1\127\3\0\1\130"+
    "\5\0\1\131\67\0\1\132\77\0\1\133\1\0\1\134"+
    "\50\0\1\135\36\0\1\136\11\0\1\137\63\0\1\140"+
    "\77\0\1\141\3\0\1\142\1\143\37\0\1\54\2\0"+
    "\10\54\2\0\1\144\62\54\1\55\2\0\10\55\2\0"+
    "\2\55\1\145\60\55\22\0\1\146\114\0\1\147\22\0"+
    "\1\150\51\0\1\151\65\0\1\152\22\0\1\153\15\0"+
    "\1\154\42\0\1\155\77\0\1\156\72\0\1\157\107\0"+
    "\1\160\73\0\1\161\7\0\1\162\1\0\1\163\67\0"+
    "\1\164\107\0\1\165\16\0\1\166\44\0\1\167\151\0"+
    "\1\170\23\0\1\171\101\0\1\172\103\0\1\173\103\0"+
    "\1\174\100\0\1\175\110\0\1\176\60\0\1\177\105\0"+
    "\1\200\115\0\1\201\47\0\1\202\14\0\1\203\61\0"+
    "\1\204\103\0\1\205\73\0\1\206\13\0\1\207\65\0"+
    "\1\210\102\0\1\211\106\0\1\212\107\0\1\213\10\0"+
    "\1\214\44\0\1\215\132\0\1\216\77\0\1\217\65\0"+
    "\1\220\66\0\1\221\65\0\1\222\115\0\1\223\61\0"+
    "\1\224\104\0\1\225\15\0\1\226\66\0\1\227\67\0"+
    "\1\230\113\0\1\231\5\0\1\232\61\0\1\233\77\0"+
    "\1\234\71\0\1\235\104\0\1\236\150\0\1\237\63\0"+
    "\1\240\72\0\1\241\42\0\1\242\130\0\1\243\65\0"+
    "\1\244\62\0\1\245\77\0\1\246\107\0\1\247\66\0"+
    "\1\250\123\0\1\251\65\0\1\252\64\0\1\253\127\0"+
    "\1\254\1\0\1\255\10\0\1\256\42\0\1\146\73\0"+
    "\1\257\101\0\1\260\75\0\1\261\112\0\1\262\116\0"+
    "\1\263\47\0\1\264\117\0\1\265\65\0\1\266\71\0"+
    "\1\267\100\0\1\270\74\0\1\271\77\0\1\272\20\0"+
    "\1\273\72\0\1\274\63\0\1\275\102\0\1\276\105\0"+
    "\1\277\101\0\1\300\17\0\1\301\47\0\1\302\74\0"+
    "\1\303\101\0\1\304\103\0\1\305\107\0\1\306\73\0"+
    "\1\307\71\0\1\310\73\0\1\311\121\0\1\312\71\0"+
    "\1\313\111\0\1\314\73\0\1\315\54\0\1\316\111\0"+
    "\1\317\66\0\1\320\112\0\1\321\106\0\1\322\57\0"+
    "\1\323\106\0\1\324\104\0\1\325\61\0\1\326\120\0"+
    "\1\327\100\0\1\330\63\0\1\331\120\0\1\332\66\0"+
    "\1\333\76\0\1\334\103\0\1\335\66\0\1\336\73\0"+
    "\1\337\72\0\1\340\62\0\1\341\143\0\1\342\47\0"+
    "\1\343\117\0\1\344\103\0\1\345\55\0\1\346\102\0"+
    "\1\347\72\0\1\350\122\0\1\351\60\0\1\352\16\0"+
    "\1\353\63\0\1\354\74\0\1\355\75\0\1\356\101\0"+
    "\1\357\102\0\1\360\75\0\1\361\103\0\1\362\112\0"+
    "\1\363\76\0\1\364\70\0\1\365\63\0\1\366\104\0"+
    "\1\367\76\0\1\370\107\0\1\371\71\0\1\372\102\0"+
    "\1\373\2\0\1\374\65\0\1\375\101\0\1\376\116\0"+
    "\1\377\55\0\1\u0100\76\0\1\u0101\1\0\1\u0102\76\0"+
    "\1\u0103\103\0\1\u0104\74\0\1\u0105\101\0\1\u0106\101\0"+
    "\1\u0107\77\0\1\u0108\73\0\1\u0109\115\0\1\u010a\61\0"+
    "\1\u010b\103\0\1\u010c\115\0\1\u010d\123\0\1\u010e\52\0"+
    "\1\u010f\60\0\1\u0110\117\0\1\u0111\57\0\1\u0112\75\0"+
    "\1\u0113\113\0\1\u0114\75\0\1\u0115\106\0\1\u0116\77\0"+
    "\1\u0117\60\0\1\u0118\117\0\1\u0119\54\0\1\u011a\121\0"+
    "\1\u011b\56\0\1\u011c\101\0\1\u011d\75\0\1\u011e\126\0"+
    "\1\u011f\75\0\1\u0120\63\0\1\u0121\71\0\1\u0122\107\0"+
    "\1\u0123\62\0\1\u0124\125\0\1\u0125\65\0\1\u0126\77\0"+
    "\1\u0127\70\0\1\u0128\123\0\1\u0129\61\0\1\u012a\76\0"+
    "\1\u012b\110\0\1\u012c\70\0\1\u012d\100\0\1\u012e\66\0"+
    "\1\u012f\146\0\1\u0130\37\0\1\u0131\120\0\1\u0132\55\0"+
    "\1\u0133\71\0\1\u0134\77\0\1\u0135\107\0\1\u0136\63\0"+
    "\1\u0137\123\0\1\u0138\65\0\1\u0139\113\0\1\u013a\56\0"+
    "\1\u013b\74\0\1\u013c\75\0\1\u013d\112\0\1\u013e\111\0"+
    "\1\u013f\66\0\1\u0140\71\0\1\u0141\71\0\1\u0142\105\0"+
    "\1\u0143\40\0\1\u0144\32\0\1\u0145\75\0\1\u0146\107\0"+
    "\1\u0147\113\0\1\u0148\53\0\1\u0149\123\0\1\u014a\55\0"+
    "\1\u014b\101\0\1\u014c\121\0\1\u014d\105\0\1\u014e\66\0"+
    "\1\u014f\54\0\1\u0150\111\0\1\u0151\70\0\1\u0152\74\0"+
    "\1\u0153\105\0\1\u0154\76\0\1\u0155\76\0\1\u0156\77\0"+
    "\1\u0157\104\0\1\u0158\70\0\1\u0159\101\0\1\u015a\74\0"+
    "\1\u015b\100\0\1\u015c\111\0\1\u015d\75\0\1\u015e\121\0"+
    "\1\u015f\47\0\1\u0160\117\0\1\u0161\54\0\1\u0162\102\0"+
    "\1\u0163\106\0\1\u0164\77\0\1\u0165\100\0\1\u0166\100\0"+
    "\1\u0167\107\0\1\u0168\60\0\1\u0169\35\0\1\u016a\45\0"+
    "\1\u016b\111\0\1\u016c\77\0\1\u016d\56\0\1\u016e\16\0"+
    "\1\u016f\10\0\1\u0170\2\0\1\u0171\1\u0172\42\0\1\u0173"+
    "\101\0\1\u0174\16\0\1\u0175\100\0\1\u0176\54\0\1\u0177"+
    "\104\0\1\u0178\114\0\1\u0179\111\0\1\u017a\67\0\1\u017b"+
    "\57\0\1\u017c\132\0\1\u017d\51\0\1\u017e\133\0\1\u017f"+
    "\36\0\1\u0180\74\0\1\u0181\107\0\1\u0182\103\0\1\u0183"+
    "\75\0\1\u0184\63\0\1\u0185\137\0\1\u0186\45\0\1\u0187"+
    "\103\0\1\u0188\65\0\1\u0189\131\0\1\u018a\57\0\1\u018b"+
    "\100\0\1\u018c\77\0\1\u018d\66\0\1\u018e\121\0\1\u018f"+
    "\67\0\1\u0190\63\0\1\u0191\101\0\1\u0192\107\0\1\u0193"+
    "\75\0\1\u0194\102\0\1\u0195\66\0\1\u0196\117\0\1\u0197"+
    "\61\0\1\u0198\16\0\1\u0199\116\0\1\u019a\61\0\1\u019b"+
    "\76\0\1\u019c\66\0\1\u019d\100\0\1\u019e\65\0\1\u019f"+
    "\77\0\1\u01a0\124\0\1\u01a1\65\0\1\u01a2\71\0\1\u01a3"+
    "\104\0\1\u01a4\107\0\1\u01a5\70\0\1\u01a6\67\0\1\u01a7"+
    "\77\0\1\u01a8\16\0\1\u01a9\56\0\1\u01aa\77\0\1\u01ab"+
    "\75\0\1\u01ac\103\0\1\u01ad\140\0\1\u01ae\46\0\1\u01af"+
    "\65\0\1\u01b0\107\0\1\u01b1\67\0\1\u01b2\120\0\1\u01b3"+
    "\103\0\1\u01b4\52\0\1\u01b5\77\0\1\u01b6\110\0\1\u01b7"+
    "\66\0\1\u01b8\77\0\1\u01b9\77\0\1\u01ba\104\0\1\u01bb"+
    "\114\0\1\u01bc\60\0\1\u01bd\76\0\1\u01be\116\0\1\u01bf"+
    "\102\0\1\u01c0\65\0\1\u01c1\67\0\1\u01c2\100\0\1\u01c3"+
    "\76\0\1\u01c4\77\0\1\u01c5\30\0\1\u01c6\66\0\1\u01c7"+
    "\60\0\1\u01c8\104\0\1\u01c9\102\0\1\u01ca\62\0\1\u01cb"+
    "\125\0\1\u01cc\65\0\1\u01cd\124\0\1\u01ce\45\0\1\u01cf"+
    "\132\0\1\u01d0\47\0\1\u01d1\125\0\1\u01d2\52\0\1\u01d3"+
    "\125\0\1\u01d4\50\0\1\u01d5\125\0\1\u01d6\70\0\1\u01d7"+
    "\61\0\1\u01d8\100\0\1\u01d9\77\0\1\u01da\66\0\1\u01db"+
    "\76\0\1\u01dc\77\0\1\u01dd\111\0\1\u01de\77\0\1\u01df"+
    "\70\0\1\u01e0\74\0\1\u01e1\112\0\1\u01e2\116\0\1\u01e3"+
    "\55\0\1\u01e4\122\0\1\u01e5\47\0\1\u01e6\106\0\1\u01e7"+
    "\106\0\1\u01e8\60\0\1\u01e9\74\0\1\u01ea\102\0\1\u01eb"+
    "\73\0\1\u01ec\101\0\1\u01ed\76\0\1\u01ee\112\0\1\u01ef"+
    "\65\0\1\u01f0\135\0\1\u01f1\43\0\1\u01f2\117\0\1\u01f3"+
    "\77\0\1\u01f4\76\0\1\u01f5\71\0\1\u01f6\64\0\1\u01f7"+
    "\77\0\1\u01f8\75\0\1\u01f9\100\0\1\u01fa\112\0\1\u01fb"+
    "\107\0\1\u01fc\76\0\1\u01fd\62\0\1\u01fe\111\0\1\u01ff"+
    "\120\0\1\u0200\61\0\1\u0201\53\0\1\u0202\141\0\1\u0203"+
    "\40\0\1\u0204\111\0\1\u0205\71\0\1\u0206\77\0\1\u0207"+
    "\76\0\1\u0208\71\0\1\u0209\133\0\1\u020a\70\0\1\u020b"+
    "\77\0\1\u020c\107\0\1\u020d\55\0\1\u020e\65\0\1\u020f"+
    "\115\0\1\u0210\113\0\1\u0211\46\0\1\u0212\76\0\1\u0213"+
    "\111\0\1\u0214\66\0\1\u0215\137\0\1\u0216\53\0\1\u0217"+
    "\64\0\1\u0218\107\0\1\u0219\102\0\1\u021a\114\0\1\u021b"+
    "\45\0\1\u021c\101\0\1\u021d\75\0\1\u021e\122\0\1\u021f"+
    "\77\0\1\u0220\56\0\1\u0221\107\0\1\u0222\110\0\1\u0223"+
    "\55\0\1\u0224\136\0\1\u0225\45\0\1\u0226\103\0\1\u0227"+
    "\110\0\1\u0228\67\0\1\u0229\107\0\1\u022a\54\0\1\u022b"+
    "\77\0\1\u022c\112\0\1\u022d\71\0\1\u022e\72\0\1\u022f"+
    "\122\0\1\u0230\56\0\1\u0231\102\0\1\u0232\72\0\1\u0233"+
    "\101\0\1\u0234\132\0\1\u0235\102\0\1\u0236\41\0\1\u0237"+
    "\77\0\1\u0238\77\0\1\u0239\75\0\1\u023a\140\0\1\u023b"+
    "\40\0\1\u023c\111\0\1\u023d\107\0\1\u023e\55\0\1\u023f"+
    "\110\0\1\u0240\100\0\1\u0241\76\0\1\u0242\66\0\1\u0243"+
    "\76\0\1\u0244\114\0\1\u0245\105\0\1\u0246\113\0\1\u0247"+
    "\100\0\1\u0248\40\0\1\u0249\121\0\1\u024a\55\0\1\u024b"+
    "\110\0\1\u024c\107\0\1\u024d\100\0\1\u024e\55\0\1\u024f"+
    "\76\0\1\u0250\112\0\1\u0251\77\0\1\u0252\65\0\1\u0253"+
    "\75\0\1\u0254\111\0\1\u0255\126\0\1\u0256\61\0\1\u0257"+
    "\100\0\1\u0258\77\0\1\u0259\67\0\1\u025a\65\0\1\u025b"+
    "\75\0\1\u025c\100\0\1\u025d\76\0\1\u025e\123\0\1\u025f"+
    "\66\0\1\u0260\73\0\1\u0261\113\0\1\u0262\56\0\1\u0263"+
    "\77\0\1\u0264\75\0\1\u0265\112\0\1\u0266\100\0\1\u0267"+
    "\65\0\1\u0268\77\0\1\u0269\121\0\1\u026a\66\0\1\u026b"+
    "\100\0\1\u026c\65\0\1\u026d\121\0\1\u026e\67\0\1\u026f"+
    "\107\0\1\u0270\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34048];

    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\2\11\1\1\1\11\1\1\2\11"+
    "\1\1\1\11\16\1\1\11\15\1\2\11\40\0\1\11"+
    "\27\0\2\1\35\0\1\1\7\0\1\11\32\0\1\11"+
    "\3\0\1\11\4\0\1\11\3\0\1\11\5\0\1\11"+
    "\10\0\1\11\1\1\14\0\1\11\10\0\1\11\2\0"+
    "\1\11\4\0\1\11\12\0\1\1\3\0\2\11\10\0"+
    "\1\11\14\0\1\11\4\0\1\11\4\0\1\11\21\0"+
    "\1\11\1\0\2\11\2\0\1\11\10\0\1\11\11\0"+
    "\1\11\6\0\1\11\4\0\1\11\4\0\1\11\16\0"+
    "\1\11\2\0\1\11\6\0\1\11\2\0\1\11\2\0"+
    "\2\11\5\0\1\11\15\0\1\11\2\0\1\11\11\0"+
    "\1\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\1\11\5\0\4\11\5\0\1\11\4\0\1\11\4\0"+
    "\1\11\4\0\1\11\6\0\2\11\12\0\2\11\1\0"+
    "\1\11\3\0\1\11\10\0\2\11\2\0\3\11\3\0"+
    "\2\11\16\0\1\11\17\0\2\11\3\0\1\11\1\0"+
    "\1\11\14\0\1\11\1\0\1\11\11\0\1\11\7\0"+
    "\1\11\3\0\1\11\23\0\1\11\3\0\1\11\15\0"+
    "\2\11\5\0\1\11\1\0\1\11\10\0\1\11\3\0"+
    "\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[624];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CwlLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _CwlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 97: break;

          case 2: 
            { return CwlTokenTypes.LINE_BREAK;
            }
          case 98: break;
          case 3: 
            { return CwlTokenTypes.TAB;
            }
          case 99: break;
          case 4: 
            { return CwlTokenTypes.END_OF_LINE_COMMENT;
            }
          case 100: break;
          case 5: 
            { return CwlTokenTypes.INT;
            }
          case 101: break;

          case 6: 
            { return CwlTokenTypes.COLON;
            }
          case 102: break;
          case 7: 
            { return CwlTokenTypes.SPACE;
            }
          case 103: break;
          case 8: 
            { return CwlTokenTypes.FORMFEED;
            }
          case 104: break;
          case 9: 
            { return CwlTokenTypes.COMMA;
            }
          case 105: break;
          case 10: 
            { return CwlTokenTypes.LBRACKET;
            }
          case 106: break;
          case 11: 
            { return CwlTokenTypes.RBRACKET;
            }
          case 107: break;
          case 12: 
            { return CwlTokenTypes.ID_KEYWORD;
            }
          case 108: break;
          case 13: 
            { return CwlTokenTypes.EXPRESSION;
            }
          case 109: break;
          case 14: 
            { return CwlTokenTypes.DOC_KEYWORD;
            }
          case 110: break;
          case 15: 
            { return CwlTokenTypes.INT_TYPE_KEYWORD;
            }
          case 111: break;
          case 16: 
            { return CwlTokenTypes.BOOLEAN;
            }
          case 112: break;
          case 17: 
            { return CwlTokenTypes.ENUM_TYPE_KEYWORD;
            }
          case 113: break;
          case 18: 
            { return CwlTokenTypes.FILE_TYPE_KEYWORD;
            }
          case 114: break;
          case 19: 
            { return CwlTokenTypes.LONG_TYPE_KEYWORD;
            }
          case 115: break;
          case 20: 
            { return CwlTokenTypes.SIZE_KEYWORD;
            }
          case 116: break;
          case 21: 
            { return CwlTokenTypes.NULL_TYPE_KEYWORD;
            }
          case 117: break;
          case 22: 
            { return CwlTokenTypes.NAME_KEYWORD;
            }
          case 118: break;
          case 23: 
            { return CwlTokenTypes.TYPE_KEYWORD;
            }
          case 119: break;
          case 24: 
            { return CwlTokenTypes.GLOB_KEYWORD;
            }
          case 120: break;
          case 25: 
            { return CwlTokenTypes.PATH_KEYWORD;
            }
          case 121: break;
          case 26: 
            { return CwlTokenTypes.CWL_VERSION_VALUE;
            }
          case 122: break;
          case 27: 
            { return CwlTokenTypes.ENTRY_KEYWORD;
            }
          case 123: break;
          case 28: 
            { return CwlTokenTypes.ARRAY_TYPE_KEYWORD;
            }
          case 124: break;
          case 29: 
            { return CwlTokenTypes.LABEL_KEYWORD;
            }
          case 125: break;
          case 30: 
            { return CwlTokenTypes.SPECS_KEYWORD;
            }
          case 126: break;
          case 31: 
            { return CwlTokenTypes.CLASS_KEYWORD;
            }
          case 127: break;
          case 32: 
            { return CwlTokenTypes.HINTS_KEYWORD;
            }
          case 128: break;
          case 33: 
            { return CwlTokenTypes.FLOAT_TYPE_KEYWORD;
            }
          case 129: break;
          case 34: 
            { return CwlTokenTypes.RECORD_KEYWORD;
            }
          case 130: break;
          case 35: 
            { return CwlTokenTypes.RAM_MAX_KEYWORD;
            }
          case 131: break;
          case 36: 
            { return CwlTokenTypes.RAM_MIN_KEYWORD;
            }
          case 132: break;
          case 37: 
            { return CwlTokenTypes.ENV_DEF_KEYWORD;
            }
          case 133: break;
          case 38: 
            { return CwlTokenTypes.STRING_TYPE_KEYWORD;
            }
          case 134: break;
          case 39: 
            { return CwlTokenTypes.DOUBLE_TYPE_KEYWORD;
            }
          case 135: break;
          case 40: 
            { return CwlTokenTypes.INPUTS_KEYWORD;
            }
          case 136: break;
          case 41: 
            { return CwlTokenTypes.FORMAT_KEYWORD;
            }
          case 137: break;
          case 42: 
            { return CwlTokenTypes.PREFIX_KEYWORD;
            }
          case 138: break;
          case 43: 
            { return CwlTokenTypes.ENV_NAME_KEYWORD;
            }
          case 139: break;
          case 44: 
            { return CwlTokenTypes.LISTING_KEYWORD;
            }
          case 140: break;
          case 45: 
            { return CwlTokenTypes.BOOLEAN_TYPE_KEYWORD;
            }
          case 141: break;
          case 46: 
            { return CwlTokenTypes.OUTPUTS_KEYWORD;
            }
          case 142: break;
          case 47: 
            { return CwlTokenTypes.NAMEEXT_KEYWORD;
            }
          case 143: break;
          case 48: 
            { return CwlTokenTypes.DEFAULT_KEYWORD;
            }
          case 144: break;
          case 49: 
            { return CwlTokenTypes.DIRNAME_KEYWORD;
            }
          case 145: break;
          case 50: 
            { return CwlTokenTypes.PACKAGE_KEYWORD;
            }
          case 146: break;
          case 51: 
            { return CwlTokenTypes.VERSION_KEYWORD;
            }
          case 147: break;
          case 52: 
            { return CwlTokenTypes.ENV_VALUE_KEYWORD;
            }
          case 148: break;
          case 53: 
            { return CwlTokenTypes.LOCATION_KEYWORD;
            }
          case 149: break;
          case 54: 
            { return CwlTokenTypes.SEPARATE_KEYWORD;
            }
          case 150: break;
          case 55: 
            { return CwlTokenTypes.BASENAME_KEYWORD;
            }
          case 151: break;
          case 56: 
            { return CwlTokenTypes.NAMEROOT_KEYWORD;
            }
          case 152: break;
          case 57: 
            { return CwlTokenTypes.CORES_MAX_KEYWORD;
            }
          case 153: break;
          case 58: 
            { return CwlTokenTypes.CORES_MIN_KEYWORD;
            }
          case 154: break;
          case 59: 
            { return CwlTokenTypes.CONTENTS_KEYWORD;
            }
          case 155: break;
          case 60: 
            { return CwlTokenTypes.CHECKSUM_KEYWORD;
            }
          case 156: break;
          case 61: 
            { return CwlTokenTypes.WRITABLE_KEYWORD;
            }
          case 157: break;
          case 62: 
            { return CwlTokenTypes.POSITION_KEYWORD;
            }
          case 158: break;
          case 63: 
            { return CwlTokenTypes.WORKFLOW_KEYWORD;
            }
          case 159: break;
          case 64: 
            { return CwlTokenTypes.ENTRYNAME_KEYWORD;
            }
          case 160: break;
          case 65: 
            { return CwlTokenTypes.OUTDIR_MAX_KEYWORD;
            }
          case 161: break;
          case 66: 
            { return CwlTokenTypes.OUTDIR_MIN_KEYWORD;
            }
          case 162: break;
          case 67: 
            { return CwlTokenTypes.TMPDIR_MAX_KEYWORD;
            }
          case 163: break;
          case 68: 
            { return CwlTokenTypes.TMPDIR_MIN_KEYWORD;
            }
          case 164: break;
          case 69: 
            { return CwlTokenTypes.DIRECTORY_TYPE_KEYWORD;
            }
          case 165: break;
          case 70: 
            { return CwlTokenTypes.VALUE_FROM_KEYWORD;
            }
          case 166: break;
          case 71: 
            { return CwlTokenTypes.SHELL_QUOTE_KEYWORD;
            }
          case 167: break;
          case 72: 
            { return CwlTokenTypes.STREAMABLE_KEYWORD;
            }
          case 168: break;
          case 73: 
            { return CwlTokenTypes.OUTPUT_EVAL_KEYWORD;
            }
          case 169: break;
          case 74: 
            { return CwlTokenTypes.DOCKER_FILE_KEYWORD;
            }
          case 170: break;
          case 75: 
            { return CwlTokenTypes.DOCKER_LOAD_KEYWORD;
            }
          case 171: break;
          case 76: 
            { return CwlTokenTypes.DOCKER_PULL_KEYWORD;
            }
          case 172: break;
          case 77: 
            { return CwlTokenTypes.CWL_VERSION;
            }
          case 173: break;
          case 78: 
            { return CwlTokenTypes.BASECOMMAND_KEYWORD;
            }
          case 174: break;
          case 79: 
            { return CwlTokenTypes.REQUIREMENTS_KEYWORD;
            }
          case 175: break;
          case 80: 
            { return CwlTokenTypes.LOAD_CONTENTS_KEYWORD;
            }
          case 176: break;
          case 81: 
            { return CwlTokenTypes.DOCKER_IMPORT_KEYWORD;
            }
          case 177: break;
          case 82: 
            { return CwlTokenTypes.INPUT_BINDING_KEYWORD;
            }
          case 178: break;
          case 83: 
            { return CwlTokenTypes.DOCKER_IMAGE_ID_KEYWORD;
            }
          case 179: break;
          case 84: 
            { return CwlTokenTypes.ITEM_SEPARATOR_KEYWORD;
            }
          case 180: break;
          case 85: 
            { return CwlTokenTypes.SECONDARY_FILES_KEYWORD;
            }
          case 181: break;
          case 86: 
            { return CwlTokenTypes.EXPRESSION_TOOL_KEYWORD;
            }
          case 182: break;
          case 87: 
            { return CwlTokenTypes.COMMAND_LINE_TOOL_KEYWORD;
            }
          case 183: break;
          case 88: 
            { return CwlTokenTypes.DOCKER_REQUIREMENT_KEYWORD;
            }
          case 184: break;
          case 89: 
            { return CwlTokenTypes.ENV_VAR_REQUIREMENT_KEYWORD;
            }
          case 185: break;
          case 90: 
            { return CwlTokenTypes.RESOURCE_REQUIREMENT_KEYWORD;
            }
          case 186: break;
          case 91: 
            { return CwlTokenTypes.SOFTWARE_REQUIREMENT_KEYWORD;
            }
          case 187: break;
          case 92: 
            { return CwlTokenTypes.SCHEMA_DEF_REQUIREMENT_KEYWORD;
            }
          case 188: break;
          case 93: 
            { return CwlTokenTypes.DOCKER_OUTPUT_DIRECTORY_KEYWORD;
            }
          case 189: break;
          case 94: 
            { return CwlTokenTypes.SHELL_COMMAND_REQUIREMENT_KEYWORD;
            }
          case 190: break;
          case 95: 
            { return CwlTokenTypes.INITIAL_WORKDIR_REQUIREMENT_KEYWORD;
            }
          case 191: break;
          case 96: 
            { return CwlTokenTypes.INLINE_JAVASCRIPT_REQUIREMENT_KEYWORD;
            }
          case 192: break;

          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
