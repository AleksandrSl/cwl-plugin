/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.cwlplugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.cwlplugin.parser.CwlTokenTypes;

import java.util.ArrayList;
import java.util.List;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cwl.flex</tt>
 */
class _CwlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\14\1\15\1\1\22\0\1\11\1\0\1\7\1\4\1\12\3\0\1\13\1\16\2\0\1"+
    "\43\1\0\1\100\1\0\1\5\1\77\10\6\1\10\7\0\1\71\1\33\1\54\1\66\1\25\2\0\1\55"+
    "\1\70\1\0\1\44\1\47\1\65\1\60\1\61\1\75\1\62\1\72\1\21\1\0\1\52\1\67\3\0\1"+
    "\73\1\0\1\74\3\0\1\26\1\32\1\40\1\37\1\24\1\53\1\56\1\41\1\45\1\0\1\42\1\27"+
    "\1\35\1\36\1\34\1\57\1\63\1\22\1\30\1\46\1\23\1\64\1\51\1\50\1\31\1\76\1\17"+
    "\1\0\1\20\7\0\1\14\242\0\2\14\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\2\5\1\1\1\6"+
    "\1\7\1\1\1\10\1\11\16\1\1\12\15\1\1\13"+
    "\1\14\2\0\37\1\1\15\30\1\1\16\1\0\1\16"+
    "\35\1\1\17\7\1\1\20\32\1\1\16\1\21\3\1"+
    "\1\22\4\1\1\23\3\1\1\24\5\1\1\25\10\1"+
    "\1\26\1\27\14\1\1\30\10\1\1\31\2\1\1\32"+
    "\4\1\1\33\12\1\1\34\3\1\1\35\1\36\10\1"+
    "\1\37\14\1\1\40\4\1\1\41\4\1\1\42\21\1"+
    "\1\43\1\1\1\44\1\45\2\1\1\46\10\1\1\47"+
    "\11\1\1\50\6\1\1\51\4\1\1\52\4\1\1\53"+
    "\16\1\1\54\2\1\1\55\6\1\1\56\2\1\1\57"+
    "\2\1\1\60\1\61\5\1\1\62\15\1\1\63\2\1"+
    "\1\64\11\1\1\65\1\1\1\66\1\1\1\67\3\1"+
    "\1\70\4\1\1\71\5\1\1\72\1\73\1\74\1\75"+
    "\5\1\1\76\4\1\1\77\4\1\1\100\4\1\1\101"+
    "\6\1\1\102\1\103\12\1\1\104\1\105\1\1\1\106"+
    "\3\1\1\107\10\1\1\110\1\111\2\1\1\112\1\113"+
    "\1\114\3\1\1\115\1\116\16\1\1\117\17\1\1\120"+
    "\1\121\3\1\1\122\1\1\1\123\14\1\1\124\1\1"+
    "\1\125\11\1\1\126\7\1\1\127\3\1\1\130\23\1"+
    "\1\131\3\1\1\132\15\1\1\133\1\134\5\1\1\135"+
    "\1\1\1\136\10\1\1\137\3\1\1\140\1\1\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[630];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\202\0\u0145\0\202"+
    "\0\u0186\0\u01c7\0\u0104\0\u0104\0\u0208\0\u0104\0\202\0\u0249"+
    "\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451"+
    "\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\202\0\u05d7\0\u0618"+
    "\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820"+
    "\0\u0861\0\u08a2\0\u08e3\0\202\0\202\0\u0924\0\u0965\0\u09a6"+
    "\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae"+
    "\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6"+
    "\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\202\0\u1185"+
    "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d"+
    "\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u0104\0\u0965"+
    "\0\u175c\0\u09a6\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2"+
    "\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\202"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1"+
    "\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9"+
    "\0\u271a\0\u275b\0\u175c\0\202\0\u279c\0\u27dd\0\u281e\0\202"+
    "\0\u285f\0\u28a0\0\u28e1\0\u2922\0\202\0\u2963\0\u29a4\0\u29e5"+
    "\0\202\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\202\0\u2b6b"+
    "\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\202"+
    "\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a"+
    "\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\202\0\u30c0\0\u3101"+
    "\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\202\0\u32c8"+
    "\0\u3309\0\202\0\u334a\0\u338b\0\u33cc\0\u340d\0\202\0\u344e"+
    "\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656"+
    "\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\202\0\202\0\u37dc"+
    "\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\202"+
    "\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab"+
    "\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\202\0\u3cf0\0\u3d31\0\u3d72"+
    "\0\u3db3\0\202\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\202\0\u3ef8"+
    "\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100"+
    "\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308"+
    "\0\202\0\u4349\0\202\0\202\0\u438a\0\u43cb\0\202\0\u440c"+
    "\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\202"+
    "\0\u4614\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db"+
    "\0\u481c\0\202\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2"+
    "\0\202\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\202\0\u4ae7\0\u4b28"+
    "\0\u4b69\0\u4baa\0\202\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef"+
    "\0\u4d30\0\u4d71\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7"+
    "\0\u4f38\0\202\0\u4f79\0\u4fba\0\202\0\u4ffb\0\u503c\0\u507d"+
    "\0\u50be\0\u50ff\0\u5140\0\202\0\u5181\0\u51c2\0\202\0\u5203"+
    "\0\u5244\0\202\0\202\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389"+
    "\0\202\0\u53ca\0\u540b\0\u544c\0\u548d\0\u54ce\0\u550f\0\u5550"+
    "\0\u5591\0\u55d2\0\u5613\0\u5654\0\u5695\0\u56d6\0\202\0\u5717"+
    "\0\u5758\0\202\0\u5799\0\u57da\0\u581b\0\u585c\0\u589d\0\u58de"+
    "\0\u591f\0\u5960\0\u59a1\0\202\0\u59e2\0\202\0\u5a23\0\202"+
    "\0\u5a64\0\u5aa5\0\u5ae6\0\202\0\u5b27\0\u5b68\0\u5ba9\0\u5bea"+
    "\0\202\0\u5c2b\0\u5c6c\0\u5cad\0\u5cee\0\u5d2f\0\202\0\202"+
    "\0\202\0\202\0\u5d70\0\u5db1\0\u5df2\0\u5e33\0\u5e74\0\202"+
    "\0\u5eb5\0\u5ef6\0\u5f37\0\u5f78\0\202\0\u5fb9\0\u5ffa\0\u603b"+
    "\0\u607c\0\202\0\u60bd\0\u60fe\0\u613f\0\u6180\0\202\0\u61c1"+
    "\0\u6202\0\u6243\0\u6284\0\u62c5\0\u6306\0\202\0\202\0\u6347"+
    "\0\u6388\0\u63c9\0\u640a\0\u644b\0\u648c\0\u64cd\0\u650e\0\u654f"+
    "\0\u6590\0\202\0\202\0\u65d1\0\202\0\u6612\0\u6653\0\u6694"+
    "\0\202\0\u66d5\0\u6716\0\u6757\0\u6798\0\u67d9\0\u681a\0\u685b"+
    "\0\u689c\0\202\0\202\0\u68dd\0\u691e\0\202\0\202\0\202"+
    "\0\u695f\0\u69a0\0\u69e1\0\202\0\202\0\u6a22\0\u6a63\0\u6aa4"+
    "\0\u6ae5\0\u6b26\0\u6b67\0\u6ba8\0\u6be9\0\u6c2a\0\u6c6b\0\u6cac"+
    "\0\u6ced\0\u6d2e\0\u6d6f\0\202\0\u6db0\0\u6df1\0\u6e32\0\u6e73"+
    "\0\u6eb4\0\u6ef5\0\u6f36\0\u6f77\0\u6fb8\0\u6ff9\0\u703a\0\u707b"+
    "\0\u70bc\0\u70fd\0\u713e\0\202\0\202\0\u717f\0\u71c0\0\u7201"+
    "\0\202\0\u7242\0\202\0\u7283\0\u72c4\0\u7305\0\u7346\0\u7387"+
    "\0\u73c8\0\u7409\0\u744a\0\u748b\0\u74cc\0\u750d\0\u754e\0\202"+
    "\0\u758f\0\202\0\u75d0\0\u7611\0\u7652\0\u7693\0\u76d4\0\u7715"+
    "\0\u7756\0\u7797\0\u77d8\0\202\0\u7819\0\u785a\0\u789b\0\u78dc"+
    "\0\u791d\0\u795e\0\u799f\0\202\0\u79e0\0\u7a21\0\u7a62\0\202"+
    "\0\u7aa3\0\u7ae4\0\u7b25\0\u7b66\0\u7ba7\0\u7be8\0\u7c29\0\u7c6a"+
    "\0\u7cab\0\u7cec\0\u7d2d\0\u7d6e\0\u7daf\0\u7df0\0\u7e31\0\u7e72"+
    "\0\u7eb3\0\u7ef4\0\u7f35\0\202\0\u7f76\0\u7fb7\0\u7ff8\0\202"+
    "\0\u8039\0\u807a\0\u80bb\0\u80fc\0\u813d\0\u817e\0\u81bf\0\u8200"+
    "\0\u8241\0\u8282\0\u82c3\0\u8304\0\u8345\0\202\0\202\0\u8386"+
    "\0\u83c7\0\u8408\0\u8449\0\u848a\0\202\0\u84cb\0\202\0\u850c"+
    "\0\u854d\0\u858e\0\u85cf\0\u8610\0\u8651\0\u8692\0\u86d3\0\202"+
    "\0\u8714\0\u8755\0\u8796\0\202\0\u87d7\0\202";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[630];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\3\1\17\1\16\2\3"+
    "\1\20\1\21\1\3\1\22\1\23\1\24\1\25\1\26"+
    "\1\3\1\27\1\30\1\31\1\3\1\32\1\33\1\34"+
    "\1\35\1\3\1\36\1\3\1\37\1\40\2\3\1\41"+
    "\1\3\1\42\1\43\1\44\1\45\1\46\2\3\1\47"+
    "\1\3\1\50\1\3\1\51\1\52\2\3\1\53\1\54"+
    "\1\55\2\3\1\11\1\3\1\16\2\0\11\16\2\0"+
    "\63\16\1\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\62\3\2\0\1\5\177\0\1\7\2\0\76\7"+
    "\1\3\2\0\2\3\2\11\1\3\2\0\1\3\1\0"+
    "\2\3\1\0\60\3\1\11\1\3\1\12\2\0\4\12"+
    "\1\3\2\56\1\12\1\56\2\12\1\56\62\12\1\3"+
    "\2\0\5\3\2\0\1\3\1\57\2\3\1\0\1\60"+
    "\62\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\3\3\1\61\57\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\5\3\1\62\1\3\1\63\53\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\17\3\1\64"+
    "\43\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\7\3\1\65\16\3\1\66\34\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\3\3\1\67\57\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\70"+
    "\5\3\1\71\10\3\1\72\34\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\5\3\1\73\14\3\1\74"+
    "\3\3\1\75\1\76\10\3\1\77\22\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\7\3\1\100\5\3"+
    "\1\101\45\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\15\3\1\102\45\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\4\3\1\103\56\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\4\3\1\104\2\3"+
    "\1\105\53\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\5\3\1\106\7\3\1\107\10\3\1\110\34\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\10\3"+
    "\1\111\4\3\1\112\4\3\1\113\7\3\1\114\30\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\26\3"+
    "\1\115\34\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\17\3\1\116\1\117\6\3\1\120\33\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\12\3\1\121"+
    "\3\3\1\122\44\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\3\3\1\123\57\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\10\3\1\124\4\3\1\125"+
    "\45\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\15\3\1\126\10\3\1\127\34\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\17\3\1\130\43\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\10\3\1\131"+
    "\52\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\3\3\1\132\3\3\1\133\5\3\1\134\45\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\5\3\1\135"+
    "\55\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\136\1\3\1\137\50\3\1\140\2\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\17\3\1\141"+
    "\11\3\1\142\31\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\15\3\1\143\45\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\15\3\1\144\3\3\1\145"+
    "\1\146\37\3\1\56\2\0\4\56\1\147\71\56\1\57"+
    "\2\0\11\57\2\0\1\150\62\57\1\60\2\0\5\60"+
    "\2\151\1\60\1\151\2\3\1\151\1\60\1\152\60\60"+
    "\1\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\4\3\1\153\56\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\21\3\1\154\22\3\1\155\16\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\16\3\1\156"+
    "\44\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\4\3\1\157\22\3\1\160\15\3\1\161\15\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\10\3\1\162"+
    "\52\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\10\3\1\163\52\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\3\3\1\164\57\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\13\3\1\165\47\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\166"+
    "\7\3\1\167\1\3\1\170\41\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\11\3\1\171\51\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\21\3\1\172"+
    "\16\3\1\173\22\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\5\3\1\174\55\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\57\3\1\175\3\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\3\3\1\176"+
    "\57\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\177\55\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\11\3\1\200\51\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\15\3\1\201\45\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\16\3\1\202"+
    "\44\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\27\3\1\203\33\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\10\3\1\204\52\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\16\3\1\205\44\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\34\3\1\206"+
    "\26\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\4\3\1\207\14\3\1\210\41\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\3\3\1\211\57\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\212"+
    "\53\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\3\3\1\213\13\3\1\214\43\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\5\3\1\215\55\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\10\3\1\216"+
    "\52\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\17\3\1\217\43\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\27\3\1\220\10\3\1\221\22\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\5\3\1\222"+
    "\55\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\40\3\1\223\22\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\40\3\1\224\22\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\26\3\1\225\34\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\15\3\1\226"+
    "\45\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\3\3\1\227\57\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\21\3\1\230\41\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\3\3\1\231\57\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\10\3\1\232"+
    "\15\3\1\233\34\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\15\3\1\234\45\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\5\3\1\235\55\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\21\3\1\236"+
    "\5\3\1\237\33\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\11\3\1\240\51\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\11\3\1\241\51\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\3\3\1\242"+
    "\57\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\10\3\1\243\52\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\61\3\1\244\1\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\45\3\1\245\15\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\40\3\1\246"+
    "\22\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\3\3\1\247\57\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\34\3\1\250\26\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\22\3\1\251\40\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\5\3\1\252"+
    "\54\3\1\151\2\0\11\151\2\0\2\151\1\253\60\151"+
    "\1\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\254\55\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\15\3\1\255\45\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\4\3\1\256\56\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\30\3\1\257"+
    "\32\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\16\3\1\260\44\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\3\3\1\261\57\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\33\3\1\262\1\3\1\263"+
    "\10\3\1\264\14\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\11\3\1\153\51\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\5\3\1\265\55\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\266"+
    "\53\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\267\55\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\20\3\1\270\42\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\37\3\1\271\23\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\272"+
    "\53\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\27\3\1\273\33\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\15\3\1\274\45\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\7\3\1\275\53\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\10\3\1\276"+
    "\52\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\277\55\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\5\3\1\300\20\3\1\301\34\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\21\3\1\302"+
    "\41\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\303\55\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\10\3\1\304\52\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\16\3\1\305\44\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\20\3\1\306"+
    "\17\3\1\307\22\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\10\3\1\310\52\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\5\3\1\311\55\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\312"+
    "\53\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\13\3\1\313\47\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\23\3\1\314\37\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\17\3\1\315\43\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\11\3\1\316"+
    "\51\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\317\55\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\27\3\1\320\33\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\21\3\1\321\41\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\33\3\1\322"+
    "\27\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\27\3\1\323\33\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\4\3\1\324\56\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\16\3\1\325\44\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\5\3\1\326"+
    "\55\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\20\3\1\327\42\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\27\3\1\330\33\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\7\3\1\331\53\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\16\3\1\332"+
    "\44\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\23\3\1\333\37\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\5\3\1\334\55\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\26\3\1\335\34\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\27\3\1\336"+
    "\33\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\13\3\1\337\47\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\34\3\1\340\26\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\23\3\1\341\37\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\22\3\1\342"+
    "\40\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\26\3\1\343\34\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\15\3\1\344\45\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\11\3\1\345\51\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\4\3\1\346"+
    "\56\3\2\0\2\3\1\347\2\3\2\0\1\3\1\0"+
    "\2\3\1\0\63\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\33\3\1\350\27\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\3\3\1\351\57\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\23\3\1\352"+
    "\37\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\27\3\1\353\33\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\5\3\1\354\55\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\10\3\1\355\52\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\3\3\1\356"+
    "\57\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\26\3\1\357\34\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\7\3\1\360\16\3\1\361\34\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\12\3\1\362"+
    "\50\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\7\3\1\363\53\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\5\3\1\364\55\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\7\3\1\365\53\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\12\3\1\366"+
    "\50\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\10\3\1\367\52\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\14\3\1\370\46\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\27\3\1\371\33\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\26\3\1\372"+
    "\34\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\17\3\1\373\43\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\3\3\1\374\57\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\10\3\1\375\52\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\376"+
    "\53\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\17\3\1\377\43\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\11\3\1\u0100\51\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\14\3\1\u0101\2\3\1\u0102"+
    "\43\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\u0103\55\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\7\3\1\u0104\53\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\26\3\1\u0105\34\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\4\3\1\u0106"+
    "\56\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\3\3\1\u0107\1\3\1\u0108\55\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\4\3\1\u0109\56\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\10\3\1\u010a"+
    "\52\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\u010b\55\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\7\3\1\u010c\53\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\11\3\1\u010d\51\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\11\3\1\u010e"+
    "\51\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\u010f\55\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\23\3\1\u0110\37\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\5\3\1\u0111\55\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\11\3\1\u0112"+
    "\51\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\27\3\1\u0113\33\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\53\3\1\u0114\7\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\26\3\1\u0115\34\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\u0116"+
    "\53\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\27\3\1\u0117\33\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\7\3\1\u0118\53\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\5\3\1\u0119\55\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\21\3\1\u011a"+
    "\41\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\17\3\1\u011b\43\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\26\3\1\u011c\34\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\26\3\1\u011d\34\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\u011e"+
    "\53\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\27\3\1\u011f\33\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\4\3\1\u0120\56\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\26\3\1\u0121\34\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\5\3\1\u0122"+
    "\55\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\7\3\1\u0123\53\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\5\3\1\u0124\55\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\34\3\1\u0125\26\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\32\3\1\u0126"+
    "\30\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\16\3\1\u0127\44\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\10\3\1\u0128\52\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\20\3\1\u0129\42\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\3\3\1\u012a"+
    "\57\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\31\3\1\u012b\31\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\17\3\1\u012c\43\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\17\3\1\u012d\43\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\10\3\1\u012e"+
    "\52\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\34\3\1\u012f\26\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\16\3\1\u0130\44\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\15\3\1\u0131\45\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\26\3\1\u0132"+
    "\34\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\17\3\1\u0133\43\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\20\3\1\u0134\42\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\7\3\1\u0135\53\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\56\3\1\u0136"+
    "\4\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\16\3\1\u0137\44\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\37\3\1\u0138\23\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\15\3\1\u0139\45\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\u013a"+
    "\53\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\7\3\1\u013b\53\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\17\3\1\u013c\43\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\3\3\1\u013d\57\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\27\3\1\u013e"+
    "\33\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\15\3\1\u013f\45\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\31\3\1\u0140\31\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\10\3\1\u0141\52\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\5\3\1\u0142"+
    "\55\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\3\3\1\u0143\57\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\16\3\1\u0144\44\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\30\3\1\u0145\32\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\17\3\1\u0146"+
    "\43\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\11\3\1\u0147\51\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\3\3\1\u0148\57\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\11\3\1\u0149\40\3\1\u014a"+
    "\10\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\u014b\55\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\3\3\1\u014c\57\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\13\3\1\u014d\47\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\27\3\1\u014e"+
    "\33\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\3\3\1\u014f\57\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\27\3\1\u0150\33\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\5\3\1\u0151\55\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\u0152"+
    "\53\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\31\3\1\u0153\31\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\37\3\1\u0154\23\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\26\3\1\u0155\34\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\3\3\1\u0156"+
    "\57\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\15\3\1\u0157\45\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\6\3\1\u0158\54\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\3\3\1\u0159\57\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\11\3\1\u015a"+
    "\51\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\10\3\1\u015b\52\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\7\3\1\u015c\53\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\7\3\1\u015d\53\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\14\3\1\u015e"+
    "\46\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\5\3\1\u015f\55\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\7\3\1\u0160\53\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\4\3\1\u0161\56\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\5\3\1\u0162"+
    "\55\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\17\3\1\u0163\43\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\15\3\1\u0164\45\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\37\3\1\u0165\23\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\7\3\1\u0166"+
    "\53\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\27\3\1\u0167\33\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\4\3\1\u0168\56\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\7\3\1\u0169\53\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\16\3\1\u016a"+
    "\44\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\16\3\1\u016b\44\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\17\3\1\u016c\43\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\20\3\1\u016d\42\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\30\3\1\u016e"+
    "\32\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\11\3\1\u016f\35\3\1\u0170\13\3\2\0\5\3\2\0"+
    "\1\3\1\0\2\3\1\0\15\3\1\u0171\45\3\2\0"+
    "\5\3\2\0\1\3\1\0\2\3\1\0\27\3\1\u0172"+
    "\33\3\2\0\5\3\2\0\1\3\1\0\2\3\1\0"+
    "\27\3\1\u0173\33\3\2\0\5\3\2\0\1\3\1\0"+
    "\2\3\1\0\6\3\1\u0174\16\3\1\u0175\10\3\1\u0176"+
    "\2\3\1\u0177\1\u0178\20\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\u0179\55\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\7\3\1\u017a\16\3"+
    "\1\u017b\34\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\27\3\1\u017c\33\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\4\3\1\u017d\56\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\11\3\1\u017e\51\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\26\3"+
    "\1\u017f\34\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\40\3\1\u0180\22\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\30\3\1\u0181\32\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\10\3\1\u0182\52\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\43\3"+
    "\1\u0183\17\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\15\3\1\u0184\45\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\51\3\1\u0185\11\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\10\3\1\u0186\52\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u0187\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\15\3\1\u0188\45\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\21\3\1\u0189\41\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\17\3\1\u018a\43\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\3\3"+
    "\1\u018b\57\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\43\3\1\u018c\17\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\11\3\1\u018d\51\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\15\3\1\u018e\45\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\3\3"+
    "\1\u018f\57\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\35\3\1\u0190\25\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\15\3\1\u0191\45\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\16\3\1\u0192\44\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\16\3"+
    "\1\u0193\44\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\5\3\1\u0194\55\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\27\3\1\u0195\33\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\17\3\1\u0196\43\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\3\3"+
    "\1\u0197\57\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\5\3\1\u0198\55\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\15\3\1\u0199\45\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\13\3\1\u019a\47\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\16\3"+
    "\1\u019b\44\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\5\3\1\u019c\55\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\25\3\1\u019d\35\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\7\3\1\u019e\16\3"+
    "\1\u019f\34\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\45\3\1\u01a0\15\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\27\3\1\u01a1\33\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\26\3\1\u01a2\34\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\15\3"+
    "\1\u01a3\45\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\16\3\1\u01a4\44\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\4\3\1\u01a5\56\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\4\3\1\u01a6\56\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\31\3"+
    "\1\u01a7\31\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\17\3\1\u01a8\43\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\11\3\1\u01a9\51\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\16\3\1\u01aa\44\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\26\3"+
    "\1\u01ab\34\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\17\3\1\u01ac\43\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\7\3\1\u01ad\53\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\7\3\1\u01ae\16\3"+
    "\1\u01af\34\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\5\3\1\u01b0\55\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\u01b1\55\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\3\3\1\u01b2\57\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\7\3"+
    "\1\u01b3\53\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\50\3\1\u01b4\12\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\17\3\1\u01b5\43\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u01b6\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\15\3"+
    "\1\u01b7\45\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\5\3\1\u01b8\55\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\26\3\1\u01b9\34\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\32\3\1\u01ba\30\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u01bb\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\5\3\1\u01bc\55\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\16\3\1\u01bd\44\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u01be\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u01bf\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\5\3\1\u01c0\55\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\12\3\1\u01c1\50\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\27\3\1\u01c2\33\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\10\3"+
    "\1\u01c3\52\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\7\3\1\u01c4\53\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\26\3\1\u01c5\34\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\31\3\1\u01c6\31\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\17\3"+
    "\1\u01c7\43\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\7\3\1\u01c8\53\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\10\3\1\u01c9\52\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\7\3\1\u01ca\53\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\7\3"+
    "\1\u01cb\30\3\1\u01cc\22\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\27\3\1\u01cd\33\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\10\3\1\u01ce\52\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\15\3"+
    "\1\u01cf\45\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\20\3\1\u01d0\42\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\3\3\1\u01d1\57\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\31\3\1\u01d2\31\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\17\3"+
    "\1\u01d3\43\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\44\3\1\u01d4\16\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\12\3\1\u01d5\50\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\45\3\1\u01d6\15\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\15\3"+
    "\1\u01d7\45\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\43\3\1\u01d8\17\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\16\3\1\u01d9\44\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\44\3\1\u01da\16\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\15\3"+
    "\1\u01db\45\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\43\3\1\u01dc\17\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\34\3\1\u01dd\26\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\16\3\1\u01de\44\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\17\3"+
    "\1\u01df\43\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\17\3\1\u01e0\43\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\6\3\1\u01e1\54\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u01e2\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u01e3\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\17\3\1\u01e4\43\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\17\3\1\u01e5\43\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\10\3\1\u01e6\52\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u01e7\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\20\3\1\u01e8\42\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\37\3\1\u01e9\23\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\15\3\1\u01ea\45\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\40\3"+
    "\1\u01eb\22\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\10\3\1\u01ec\52\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\17\3\1\u01ed\43\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\26\3\1\u01ee\34\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\7\3"+
    "\1\u01ef\53\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\4\3\1\u01f0\56\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\7\3\1\u01f1\53\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\3\3\1\u01f2\57\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u01f3\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\4\3\1\u01f4\56\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\17\3\1\u01f5\43\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u01f6\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\43\3"+
    "\1\u01f7\17\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\7\3\1\u01f8\53\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\27\3\1\u01f9\33\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\27\3\1\u01fa\33\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\26\3"+
    "\1\u01fb\34\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\20\3\1\u01fc\42\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\u01fd\55\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u01fe\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\3\3"+
    "\1\u01ff\57\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\4\3\1\u0200\56\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\17\3\1\u0201\43\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\27\3\1\u0202\33\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\26\3"+
    "\1\u0203\34\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\11\3\1\u0204\51\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\23\3\1\u0205\37\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\44\3\1\u0206\16\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\26\3"+
    "\1\u0207\34\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\2\3\1\u0208\60\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\44\3\1\u0209\16\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u020a\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\17\3"+
    "\1\u020b\43\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\11\3\1\u020c\51\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\11\3\1\u020d\51\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\10\3\1\u020e\52\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\2\3"+
    "\1\u020f\60\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\36\3\1\u0210\24\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\27\3\1\u0211\33\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\27\3\1\u0212\33\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\37\3"+
    "\1\u0213\23\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\15\3\1\u0214\45\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\3\3\1\u0215\57\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\21\3\1\u0216\41\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\35\3"+
    "\1\u0217\25\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\4\3\1\u0218\56\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\3\3\1\u0219\57\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\15\3\1\u021a\45\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\4\3"+
    "\1\u021b\56\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\44\3\1\u021c\16\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\20\3\1\u021d\42\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u021e\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\15\3"+
    "\1\u021f\45\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\20\3\1\u0220\42\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\35\3\1\u0221\25\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\3\3\1\u0222\57\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u0223\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\3\3\1\u0224\57\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\26\3\1\u0225\34\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\26\3\1\u0226\34\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u0227\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\15\3\1\u0228\45\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\26\3\1\u0229\34\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\4\3\1\u022a\56\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\43\3"+
    "\1\u022b\17\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\11\3\1\u022c\51\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\15\3\1\u022d\45\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\26\3\1\u022e\34\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\16\3"+
    "\1\u022f\44\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\26\3\1\u0230\34\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\3\3\1\u0231\57\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\3\3\1\u0232\57\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\16\3"+
    "\1\u0233\44\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\10\3\1\u0234\52\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\3\3\1\u0235\57\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\26\3\1\u0236\34\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u0237\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\10\3\1\u0238\52\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\3\3\1\u0239\57\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u023a\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\40\3"+
    "\1\u023b\22\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\43\3\1\u023c\17\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\u023d\55\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u023e\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u023f\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\3\3\1\u0240\57\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\44\3\1\u0241\16\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u0242\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\17\3"+
    "\1\u0243\43\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\27\3\1\u0244\33\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\u0245\55\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\16\3\1\u0246\44\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\17\3"+
    "\1\u0247\43\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\16\3\1\u0248\44\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\u0249\55\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\4\3\1\u024a\56\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\21\3"+
    "\1\u024b\41\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\27\3\1\u024c\33\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\43\3\1\u024d\17\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\44\3\1\u024e\16\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u024f\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\27\3\1\u0250\33\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\u0251\55\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\16\3\1\u0252\44\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\26\3"+
    "\1\u0253\34\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\27\3\1\u0254\33\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\u0255\55\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\4\3\1\u0256\56\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\17\3"+
    "\1\u0257\43\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\17\3\1\u0258\43\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\u0259\55\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\3\3\1\u025a\57\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\15\3"+
    "\1\u025b\45\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\44\3\1\u025c\16\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\26\3\1\u025d\34\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\27\3\1\u025e\33\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\27\3"+
    "\1\u025f\33\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\17\3\1\u0260\43\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\u0261\55\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\3\3\1\u0262\57\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\4\3"+
    "\1\u0263\56\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\3\3\1\u0264\57\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\27\3\1\u0265\33\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\16\3\1\u0266\44\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\12\3"+
    "\1\u0267\50\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\26\3\1\u0268\34\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\5\3\1\u0269\55\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u026a\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\3\3"+
    "\1\u026b\57\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\16\3\1\u026c\44\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\17\3\1\u026d\43\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\5\3\1\u026e\55\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u026f\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\27\3\1\u0270\33\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\16\3\1\u0271\44\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\17\3\1\u0272\43\3"+
    "\2\0\5\3\2\0\1\3\1\0\2\3\1\0\5\3"+
    "\1\u0273\55\3\2\0\5\3\2\0\1\3\1\0\2\3"+
    "\1\0\27\3\1\u0274\33\3\2\0\5\3\2\0\1\3"+
    "\1\0\2\3\1\0\17\3\1\u0275\43\3\2\0\5\3"+
    "\2\0\1\3\1\0\2\3\1\0\27\3\1\u0276\32\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\5\1\2\11\1\1\1\11\37\1"+
    "\2\0\67\1\1\11\1\1\1\0\u020d\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[630];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CwlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _CwlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return CwlTokenTypes.STRING;
            }
          case 98: break;
          case 2: 
            { return CwlTokenTypes.LINE_BREAK;
            }
          case 99: break;
          case 3: 
            { return CwlTokenTypes.TAB;
            }
          case 100: break;
          case 4: 
            { return CwlTokenTypes.END_OF_LINE_COMMENT;
            }
          case 101: break;
          case 5: 
            { return CwlTokenTypes.INT;
            }
          case 102: break;
          case 6: 
            { return CwlTokenTypes.COLON;
            }
          case 103: break;
          case 7: 
            { return CwlTokenTypes.SPACE;
            }
          case 104: break;
          case 8: 
            { return TokenType.BAD_CHARACTER;
            }
          case 105: break;
          case 9: 
            { return CwlTokenTypes.FORMFEED;
            }
          case 106: break;
          case 10: 
            { return CwlTokenTypes.COMMA;
            }
          case 107: break;
          case 11: 
            { return CwlTokenTypes.LBRACKET;
            }
          case 108: break;
          case 12: 
            { return CwlTokenTypes.RBRACKET;
            }
          case 109: break;
          case 13: 
            { return CwlTokenTypes.ID_KEYWORD;
            }
          case 110: break;
          case 14: 
            { return CwlTokenTypes.EXPRESSION;
            }
          case 111: break;
          case 15: 
            { return CwlTokenTypes.DOC_KEYWORD;
            }
          case 112: break;
          case 16: 
            { return CwlTokenTypes.INT_TYPE_KEYWORD;
            }
          case 113: break;
          case 17: 
            { return CwlTokenTypes.BOOLEAN;
            }
          case 114: break;
          case 18: 
            { return CwlTokenTypes.ENUM_TYPE_KEYWORD;
            }
          case 115: break;
          case 19: 
            { return CwlTokenTypes.FILE_TYPE_KEYWORD;
            }
          case 116: break;
          case 20: 
            { return CwlTokenTypes.LONG_TYPE_KEYWORD;
            }
          case 117: break;
          case 21: 
            { return CwlTokenTypes.SIZE_KEYWORD;
            }
          case 118: break;
          case 22: 
            { return CwlTokenTypes.NULL_TYPE_KEYWORD;
            }
          case 119: break;
          case 23: 
            { return CwlTokenTypes.NAME_KEYWORD;
            }
          case 120: break;
          case 24: 
            { return CwlTokenTypes.TYPE_KEYWORD;
            }
          case 121: break;
          case 25: 
            { return CwlTokenTypes.GLOB_KEYWORD;
            }
          case 122: break;
          case 26: 
            { return CwlTokenTypes.PATH_KEYWORD;
            }
          case 123: break;
          case 27: 
            { return CwlTokenTypes.CWL_VERSION_VALUE;
            }
          case 124: break;
          case 28: 
            { return CwlTokenTypes.ENTRY_KEYWORD;
            }
          case 125: break;
          case 29: 
            { return CwlTokenTypes.ARRAY_TYPE_KEYWORD;
            }
          case 126: break;
          case 30: 
            { return CwlTokenTypes.LABEL_KEYWORD;
            }
          case 127: break;
          case 31: 
            { return CwlTokenTypes.SPECS_KEYWORD;
            }
          case 128: break;
          case 32: 
            { return CwlTokenTypes.CLASS_KEYWORD;
            }
          case 129: break;
          case 33: 
            { return CwlTokenTypes.HINTS_KEYWORD;
            }
          case 130: break;
          case 34: 
            { return CwlTokenTypes.FLOAT_TYPE_KEYWORD;
            }
          case 131: break;
          case 35: 
            { return CwlTokenTypes.RECORD_KEYWORD;
            }
          case 132: break;
          case 36: 
            { return CwlTokenTypes.RAM_MAX_KEYWORD;
            }
          case 133: break;
          case 37: 
            { return CwlTokenTypes.RAM_MIN_KEYWORD;
            }
          case 134: break;
          case 38: 
            { return CwlTokenTypes.ENV_DEF_KEYWORD;
            }
          case 135: break;
          case 39: 
            { return CwlTokenTypes.STRING_TYPE_KEYWORD;
            }
          case 136: break;
          case 40: 
            { return CwlTokenTypes.DOUBLE_TYPE_KEYWORD;
            }
          case 137: break;
          case 41: 
            { return CwlTokenTypes.INPUTS_KEYWORD;
            }
          case 138: break;
          case 42: 
            { return CwlTokenTypes.FORMAT_KEYWORD;
            }
          case 139: break;
          case 43: 
            { return CwlTokenTypes.PREFIX_KEYWORD;
            }
          case 140: break;
          case 44: 
            { return CwlTokenTypes.ENV_NAME_KEYWORD;
            }
          case 141: break;
          case 45: 
            { return CwlTokenTypes.LISTING_KEYWORD;
            }
          case 142: break;
          case 46: 
            { return CwlTokenTypes.BOOLEAN_TYPE_KEYWORD;
            }
          case 143: break;
          case 47: 
            { return CwlTokenTypes.OUTPUTS_KEYWORD;
            }
          case 144: break;
          case 48: 
            { return CwlTokenTypes.NAMEEXT_KEYWORD;
            }
          case 145: break;
          case 49: 
            { return CwlTokenTypes.DEFAULT_KEYWORD;
            }
          case 146: break;
          case 50: 
            { return CwlTokenTypes.DIRNAME_KEYWORD;
            }
          case 147: break;
          case 51: 
            { return CwlTokenTypes.PACKAGE_KEYWORD;
            }
          case 148: break;
          case 52: 
            { return CwlTokenTypes.VERSION_KEYWORD;
            }
          case 149: break;
          case 53: 
            { return CwlTokenTypes.ENV_VALUE_KEYWORD;
            }
          case 150: break;
          case 54: 
            { return CwlTokenTypes.LOCATION_KEYWORD;
            }
          case 151: break;
          case 55: 
            { return CwlTokenTypes.SEPARATE_KEYWORD;
            }
          case 152: break;
          case 56: 
            { return CwlTokenTypes.BASENAME_KEYWORD;
            }
          case 153: break;
          case 57: 
            { return CwlTokenTypes.NAMEROOT_KEYWORD;
            }
          case 154: break;
          case 58: 
            { return CwlTokenTypes.CORES_MAX_KEYWORD;
            }
          case 155: break;
          case 59: 
            { return CwlTokenTypes.CORES_MIN_KEYWORD;
            }
          case 156: break;
          case 60: 
            { return CwlTokenTypes.CONTENTS_KEYWORD;
            }
          case 157: break;
          case 61: 
            { return CwlTokenTypes.CHECKSUM_KEYWORD;
            }
          case 158: break;
          case 62: 
            { return CwlTokenTypes.WRITABLE_KEYWORD;
            }
          case 159: break;
          case 63: 
            { return CwlTokenTypes.POSITION_KEYWORD;
            }
          case 160: break;
          case 64: 
            { return CwlTokenTypes.WORKFLOW_KEYWORD;
            }
          case 161: break;
          case 65: 
            { return CwlTokenTypes.ENTRYNAME_KEYWORD;
            }
          case 162: break;
          case 66: 
            { return CwlTokenTypes.OUTDIR_MAX_KEYWORD;
            }
          case 163: break;
          case 67: 
            { return CwlTokenTypes.OUTDIR_MIN_KEYWORD;
            }
          case 164: break;
          case 68: 
            { return CwlTokenTypes.TMPDIR_MAX_KEYWORD;
            }
          case 165: break;
          case 69: 
            { return CwlTokenTypes.TMPDIR_MIN_KEYWORD;
            }
          case 166: break;
          case 70: 
            { return CwlTokenTypes.DIRECTORY_TYPE_KEYWORD;
            }
          case 167: break;
          case 71: 
            { return CwlTokenTypes.VALUE_FROM_KEYWORD;
            }
          case 168: break;
          case 72: 
            { return CwlTokenTypes.SHELL_QUOTE_KEYWORD;
            }
          case 169: break;
          case 73: 
            { return CwlTokenTypes.STREAMABLE_KEYWORD;
            }
          case 170: break;
          case 74: 
            { return CwlTokenTypes.OUTPUT_EVAL_KEYWORD;
            }
          case 171: break;
          case 75: 
            { return CwlTokenTypes.DOCKER_FILE_KEYWORD;
            }
          case 172: break;
          case 76: 
            { return CwlTokenTypes.DOCKER_LOAD_KEYWORD;
            }
          case 173: break;
          case 77: 
            { return CwlTokenTypes.DOCKER_PULL_KEYWORD;
            }
          case 174: break;
          case 78: 
            { return CwlTokenTypes.CWL_VERSION;
            }
          case 175: break;
          case 79: 
            { return CwlTokenTypes.BASECOMMAND_KEYWORD;
            }
          case 176: break;
          case 80: 
            { return CwlTokenTypes.REQUIREMENTS_KEYWORD;
            }
          case 177: break;
          case 81: 
            { return CwlTokenTypes.LOAD_CONTENTS_KEYWORD;
            }
          case 178: break;
          case 82: 
            { return CwlTokenTypes.DOCKER_IMPORT_KEYWORD;
            }
          case 179: break;
          case 83: 
            { return CwlTokenTypes.INPUT_BINDING_KEYWORD;
            }
          case 180: break;
          case 84: 
            { return CwlTokenTypes.DOCKER_IMAGE_ID_KEYWORD;
            }
          case 181: break;
          case 85: 
            { return CwlTokenTypes.ITEM_SEPARATOR_KEYWORD;
            }
          case 182: break;
          case 86: 
            { return CwlTokenTypes.SECONDARY_FILES_KEYWORD;
            }
          case 183: break;
          case 87: 
            { return CwlTokenTypes.EXPRESSION_TOOL_KEYWORD;
            }
          case 184: break;
          case 88: 
            { return CwlTokenTypes.COMMAND_LINE_TOOL_KEYWORD;
            }
          case 185: break;
          case 89: 
            { return CwlTokenTypes.DOCKER_REQUIREMENT_KEYWORD;
            }
          case 186: break;
          case 90: 
            { return CwlTokenTypes.ENV_VAR_REQUIREMENT_KEYWORD;
            }
          case 187: break;
          case 91: 
            { return CwlTokenTypes.RESOURCE_REQUIREMENT_KEYWORD;
            }
          case 188: break;
          case 92: 
            { return CwlTokenTypes.SOFTWARE_REQUIREMENT_KEYWORD;
            }
          case 189: break;
          case 93: 
            { return CwlTokenTypes.SCHEMA_DEF_REQUIREMENT_KEYWORD;
            }
          case 190: break;
          case 94: 
            { return CwlTokenTypes.DOCKER_OUTPUT_DIRECTORY_KEYWORD;
            }
          case 191: break;
          case 95: 
            { return CwlTokenTypes.SHELL_COMMAND_REQUIREMENT_KEYWORD;
            }
          case 192: break;
          case 96: 
            { return CwlTokenTypes.INITIAL_WORKDIR_REQUIREMENT_KEYWORD;
            }
          case 193: break;
          case 97: 
            { return CwlTokenTypes.INLINE_JAVASCRIPT_REQUIREMENT_KEYWORD;
            }
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
