{
  parserClass="com.cwlplugin.parser.CwlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Cwl"
  psiImplClassSuffix="Impl"
  psiPackage="com.cwlplugin.psi"
  psiImplPackage="com.cwlplugin.psi.impl"

  elementTypeHolderClass="com.cwlplugin.psi.CwlTypes"
  elementTypeClass="com.cwlplugin.psi.CwlElementType"
  tokenTypeClass="com.cwlplugin.lexer.CwlTokenType"

  // These tokens are just for Interactive Preview
  tokens = [
  ANY = ".*"
  ARRAY_TYPE = "array"
  BASECOMMAND = "baseCommand"
  BASENAME = "basename"
  BOOLEAN = "True"
  BOOLEAN_TYPE = "boolean"
  CHECKSUM = "checksum"
  CLASS = "class"
  COLON = ":"
  COMMA = ","
  COMMAND_LINE_TOOL = "CommandLineTool"
//  COMMAND = "ls"
  CONTENTS = "contents"
  CORES_MAX = "coresMin"
  CORES_MIN = "coresMin"
  //  COMMAND = "regexp:\w*"
  CWL_VERSION = "cwlVersion"
  DEFAULT = "default"
  DIRECTORY_TYPE = "Directory"
  DIRNAME = "dirname"
  DOC = "doc"
  DOCKER_FILE = "dockerFile"
  DOCKER_IMAGE_ID = "dockerImageId"
  DOCKER_IMPORT= "dockerImport"
  DOCKER_LOAD = "dockerLoad"
  DOCKER_OUTPUT_DIRECTORY = "dockerOutputDirectory"
  DOCKER_PULL = "dockerPull"
  DOCKER_REQUIREMENT = "DockerRequirement"
  DOUBLE_TYPE = "double"
  ENTRY = "entry"
  ENTRYNAME = "entryname"
  ENUM_TYPE = "enum"
  ENV_DEF = "envDef"
  ENV_NAME = "envName"
  ENV_VALUE = "envValue"
  ENV_VAR_REQUIREMENT = "EnvVarRequirement"
  EOL = "regexp:\n|\r\n|\r"
  EXPRESSION = "$()"
  EXPRESSION_TOOL = "ExpressionTool"
  FILE_TYPE = "File"
  FLOAT_TYPE = "float"
  FORMAT = "format"
  GLOB = "glob"
  HINTS  = "hints"
  IDENTIFIER = "IDENTIFIER"
  ID = "id"
  INITIAL_WORKDIR_REQUIREMENT = "InitialWorkDirRequirement"
  INLINE_JAVASCRIPT_REQUIREMENT = "InlineJavascriptRequirement"
  INPUT_BINDING = "inputBinding"
  INPUTS_TK = "inputs"
  INT = "regexp:\d+"
  INT_TYPE = "int"
  ITEM_SEPARATOR = "itemSeparator"
  LABEL = "label"
  LBRACKET = "["
  LISTING = "listing"
  LOAD_CONTENTS = "loadContents"
  LOCATION = "location"
  LONG_TYPE = "long"
  NAME = "name"
  NAMEEXT = "nameext"
  NAMEROOT = "nameroot"
  NULL_TYPE = "null"
  NUMBER = "regexp:\d+"
  OUTDIR_MAX = "outdirMax"
  OUTDIR_MIN = "outdirMin"
  OUTPUT_EVAL = "outputEval"
  OUTPUTS = "outputs"
  PACKAGE = "package"
  PATH = "path"
  PERMANENT_FAIL_CODES = "permanentFailCodes"
  POSITION = "position"
  PREFIX = "prefix"
  RAM_MAX  = "ramMax"
  RAM_MIN  = "ramMin"
  RBRACKET = "]"
  RECORD = "record"
  REQUIREMENTS_TK = "requirements"
  RESOURCE_REQUIREMENT = "ResourceRequirement"
  SCHEMA_DEF_REQUIREMENT = "SchemaDefRequirement"
  SECONDARY_FILES = "secondaryFiles"
  SEPARATE = "separate"
  SHELL_COMMAND_REQUIREMENT = "ShellCommandRequirement"
  SHELL_QUOTE = "shellQuote"
  SIZE = "size"
  SOFTWARE_REQUIREMENT = "SoftwareRequirement"
  space="regexp:\s+"
  SPECS = "specs"
  STREAMABLE = "streamable"
  //  STRING = "regexp:(\s\|[\n\r]\w)"
  STRING = "some_string"
  STRING_TYPE = "string"
  SUCCESS_CODES = "successCodes"
  TEMPORARY_FAIL_CODES = "temporaryFailCodes"
  TMPDIR_MAX = "tmpdirMax"
  TMPDIR_MIN = "tmpdirMin"
  TYPE = "type"
  VALUE_FROM = "valueFrom"
  CWL_VERSION_VALUE = "v1.0"
  VERSION = "version"
  WORKFLOW = "Workflow"
  WRITABLE = "writable"
]

//  psiImplUtilClass="com.cwlplugin.psi.CwlPsiImplUtilKt"
}

//Make cwlVersion the first line
cwl_file ::= !<<eof>> cwl_version tool_description

private cwl_version ::= CWL_VERSION COLON CWL_VERSION_VALUE

private tool_description ::= (command_line_tool)

private command_line_tool ::= command_line_tool_field *
command_line_tool_field ::= (
    inputs
    | outputs
    | command_line_tool_class
    | base_command
    | requirements
    | id
    | label
    | doc
    | hints
    | arguments
    | stderr
    | stdin
    | stdout
    | success_codes
    | temporary_fail_codes
    | permanent_fail_codes
    )

private command_line_tool_class ::= CLASS COLON COMMAND_LINE_TOOL
// string	True
requirements ::= REQUIREMENTS_TK COLON  requirement + 
requirement ::= (
inline_javascript_requirement
| schema_def_requirement
| docker_requirement
| software_requirement
| initial_workdir_requirement
| env_var_requirement
| shell_command_requirement
| resource_requirement
)

private inline_javascript_requirement ::= CLASS COLON INLINE_JAVASCRIPT_REQUIREMENT
private schema_def_requirement ::= CLASS COLON SCHEMA_DEF_REQUIREMENT
private docker_requirement ::= CLASS COLON DOCKER_REQUIREMENT  docker_requirement_field + 
private docker_requirement_field ::= (
docker_pull
| docker_load
| docker_file
| docker_import
| docker_image_id
| docker_output_directory)
private docker_pull ::= DOCKER_PULL COLON STRING
private docker_load ::= DOCKER_LOAD COLON STRING
private docker_file ::= DOCKER_FILE COLON STRING
private docker_import ::= DOCKER_IMPORT COLON STRING
private docker_image_id ::= DOCKER_IMAGE_ID COLON STRING
private docker_output_directory ::= DOCKER_OUTPUT_DIRECTORY COLON STRING

private software_requirement ::= CLASS COLON SOFTWARE_REQUIREMENT  packages 
packages ::= software_package_array
software_package_array ::= LBRACKET (software_package COMMA) * software_package RBRACKET
software_package ::= (package | version | specs)
private package ::= PACKAGE COLON STRING
private version ::= VERSION COLON string_array
private specs ::= SPECS COLON string_array

private initial_workdir_requirement ::= CLASS COLON INITIAL_WORKDIR_REQUIREMENT  initial_workdir_listing 
initial_workdir_listing ::= file_array | directory_array | dirent_array | string_array | expression_array | STRING | EXPRESSION
// array<File | Directory | Dirent | string | Expression>
dirent_array ::= LBRACKET (dirent COMMA) * dirent RBRACKET
dirent ::= (entry | entryname | writable)
private entry ::= ENTRY COLON (STRING | EXPRESSION)
private entryname ::= ENTRYNAME COLON (STRING | EXPRESSION)
private writable ::= WRITABLE COLON BOOLEAN

// TODO Maybe make all required fields autogenerated and preordered?
private env_var_requirement ::= CLASS COLON ENV_VAR_REQUIREMENT  env_def 
private env_def ::= ENV_DEF COLON env_name env_value
private env_name ::= ENV_NAME COLON STRING
private env_value ::= ENV_VALUE COLON (STRING | EXPRESSION)

private shell_command_requirement ::= CLASS COLON SHELL_COMMAND_REQUIREMENT

private resource_requirement ::= CLASS COLON RESOURCE_REQUIREMENT  resource_requirement_field * 
resource_requirement_field ::= (
cores_min
| cores_max
| ram_min
| ram_max
| tmpdir_min
| tmpdir_max
| outdir_min
| outdir_max
)
private cores_min ::= CORES_MIN COLON (NUMBER | STRING | EXPRESSION)
private cores_max ::= CORES_MAX COLON (NUMBER | STRING | EXPRESSION)
private ram_min ::= RAM_MIN COLON (NUMBER | STRING | EXPRESSION)
private ram_max ::= RAM_MAX COLON (NUMBER | STRING | EXPRESSION)
private tmpdir_min ::= TMPDIR_MIN COLON (NUMBER | STRING | EXPRESSION)
private tmpdir_max ::= TMPDIR_MAX COLON (NUMBER | STRING | EXPRESSION)
private outdir_min ::= OUTDIR_MIN COLON (NUMBER | STRING | EXPRESSION)
private outdir_max ::= OUTDIR_MAX COLON (NUMBER | STRING | EXPRESSION)

// array<InlineJavascriptRequirement | SchemaDefRequirement | DockerRequirement | SoftwareRequirement | InitialWorkDirRequirement | EnvVarRequirement | ShellCommandRequirement | ResourceRequirement>	False
private hints ::= HINTS COLON STRING *
// array<Any>	False
private base_command ::= BASECOMMAND COLON (STRING | string_array)
// string | array<string>	False
private arguments ::= (string_array | expression_array | command_line_binding_array)
// array<string | Expression | CommandLineBinding>	False
private stdin ::= STRING | EXPRESSION
// string | Expression	False
private stderr ::= STRING | EXPRESSION
// string | Expression	False
private stdout ::= STRING | EXPRESSION
//	string | Expression	False

private success_codes ::= SUCCESS_CODES COLON int_array
// array.<int>	False
private temporary_fail_codes ::= TEMPORARY_FAIL_CODES COLON int_array
//	array<int>	False
private permanent_fail_codes ::= PERMANENT_FAIL_CODES COLON int_array
//	array<int>	False


// array<CommandInputParameter> | map<CommandInputParameter.id, CommandInputParameter.type> | map<CommandInputParameter.id, CommandInputParameter>	True
inputs ::= INPUTS_TK COLON  command_input_parameter + 

command_input_parameter ::= IDENTIFIER COLON  command_input_parameter_field +

command_input_parameter_field ::= ( default | doc | format | id | input_binding | label | secondary_files | streamable | type )

private default ::= DEFAULT COLON ANY
private doc ::= DOC COLON (STRING | string_array)
private format ::= FORMAT COLON (STRING | string_array | EXPRESSION)
private id ::= ID COLON STRING

private input_binding ::= INPUT_BINDING COLON  command_line_binding_field + 
command_line_binding_field ::=
(
load_contents
| value_from
| position
| separate
| item_separator
| prefix
| shell_quote
)

private value_from ::= VALUE_FROM COLON (STRING | EXPRESSION)
private position ::= POSITION COLON INT
private separate ::= SEPARATE COLON BOOLEAN
private item_separator ::= ITEM_SEPARATOR COLON STRING
private prefix ::= PREFIX COLON STRING
private shell_quote ::= SHELL_QUOTE COLON BOOLEAN
private load_contents ::= LOAD_CONTENTS COLON BOOLEAN  // Only valid when type: File or is an array of items: File

private label ::= LABEL COLON STRING
private secondary_files ::= SECONDARY_FILES COLON  (STRING | EXPRESSION | string_array | expression_array) 
private streamable ::= STREAMABLE COLON BOOLEAN
private type ::= TYPE COLON STRING_TYPE

private string_array ::= LBRACKET (STRING COMMA) * STRING RBRACKET
private expression_array ::= LBRACKET (EXPRESSION COMMA) * EXPRESSION RBRACKET
private command_line_binding_array ::= LBRACKET (input_binding COMMA) * input_binding RBRACKET
int_array ::= LBRACKET (INT COMMA) * INT RBRACKET
file_array ::= LBRACKET (file COMMA) * file RBRACKET
directory_array ::= LBRACKET (directory COMMA) * directory RBRACKET

// array<CommandOutputParameter> | map<CommandOutputParameter.id, CommandOutputParameter.type> | map<CommandOutputParameter.id, CommandOutputParameter>	True
private outputs ::= OUTPUTS COLON  command_output_parameter + 

command_output_parameter ::= IDENTIFIER COLON  command_output_parameter_field + 
command_output_parameter_field ::= (id | label | secondary_files | format | streamable | doc | output_binding | type)

output_binding ::= command_output_binding
command_output_binding ::= COLON  command_output_binding_field + 
command_output_binding_field ::= (glob | load_contents | output_eval)
private glob ::= GLOB COLON (STRING | EXPRESSION | string_array)
private output_eval ::= OUTPUT_EVAL COLON (STRING | EXPRESSION)

// TODO add expression_tool and workflow
private expression_tool ::= " "
private workflow ::= " "

file_ ::= CLASS COLON FILE_TYPE  file_field + 
file_field ::= (location | path | basename | dirname | nameroot | nameext | checksum | size | file_secondary_files | format | contents)
private location ::= LOCATION COLON STRING
private path ::= PATH COLON STRING
private basename ::= BASENAME COLON STRING
private dirname ::= DIRNAME COLON STRING
private nameext ::= NAMEEXT COLON STRING
private nameroot ::= NAMEROOT COLON STRING
private checksum ::= CHECKSUM COLON STRING
private size ::= SIZE COLON NUMBER
private file_secondary_files ::= SECONDARY_FILES COLON (file_array | directory_array)
private contents ::= CONTENTS COLON STRING

directory ::= CLASS COLON DIRECTORY_TYPE  directory_field + 
directory_field ::= (location | path | basename | listing)
private listing ::= LISTING COLON (file_array | directory_array) // The name of each file or subdirectory is determined by the basename field of each File or Directory object. It is an error if a File shares a basename with any other entry in listing. If two or more Directory object share the same basename, this must be treated as equivalent to a single subdirectory with the listings recursively merged.

private left command_input_record_schema ::= (record_type | label | command_input_record_fields )

record_type ::= TYPE COLON RECORD
command_input_record_fields ::= command_input_record_field *
command_input_record_field ::= (name | doc | input_binding | label | command_input_record_field_type)
command_input_record_field_type ::= (
cwl_type
| command_input_enum_schema
| STRING
| cwl_type_array
| command_input_record_schema_array
| command_input_enum_schema_array
| command_input_array_schema_array
| string_array
| command_input_record_schema
| command_input_array_schema
)
private name ::= NAME COLON STRING

command_input_enum_schema ::= (symbols | enum_type | label | input_binding)
symbols ::= string_array
private enum_type ::= TYPE COLON ENUM_TYPE

command_input_array_schema ::= (array_type | label | input_binding | command_input_array_items)
private array_type ::= TYPE COLON ARRAY_TYPE
command_input_array_items ::= (
                          cwl_type
                          | command_input_enum_schema
                          | STRING
                          | cwl_type_array
                          | command_input_record_schema_array
                          | command_input_enum_schema_array
                          | command_input_array_schema_array
                          | string_array
                          | command_input_array_schema
                          | command_input_record_schema
                          )

command_output_record_schema ::= (record_type | command_output_record_fields | label)
command_output_record_fields ::= command_output_record_field *
command_output_record_field ::= (name | command_output_record_field_type | doc | output_binding)
command_output_record_field_type ::= (
cwl_type
| command_output_enum_schema
| STRING
| cwl_type_array
| command_output_record_schema_array
| command_output_enum_schema_array
| command_output_array_schema_array
| string_array
| command_output_record_schema
| command_output_array_schema
)

command_output_enum_schema ::= (symbols | enum_type | label | output_binding)
command_output_array_schema ::= (command_output_array_items | array_type | label | output_binding)
command_output_array_items ::= command_output_record_field_type


cwl_type ::= (
NULL_TYPE
| BOOLEAN_TYPE
| INT_TYPE
| LONG_TYPE
| FLOAT_TYPE
| DOUBLE_TYPE
| STRING_TYPE
| FILE_TYPE
| DIRECTORY_TYPE
)

cwl_type_array ::= LBRACKET (cwl_type COMMA) * cwl_type RBRACKET
command_output_record_schema_array ::= LBRACKET (command_output_record_schema COMMA) * command_output_record_schema RBRACKET
command_output_enum_schema_array ::= LBRACKET (command_output_enum_schema COMMA) * command_output_enum_schema RBRACKET
command_output_array_schema_array ::= LBRACKET (command_output_array_schema COMMA) * command_output_array_schema RBRACKET

command_input_record_schema_array ::= LBRACKET (command_input_record_schema COMMA) * command_input_record_schema RBRACKET
command_input_enum_schema_array ::= LBRACKET (command_input_enum_schema COMMA) * command_input_enum_schema RBRACKET
command_input_array_schema_array ::= LBRACKET (command_input_array_schema COMMA) * command_input_array_schema RBRACKET
